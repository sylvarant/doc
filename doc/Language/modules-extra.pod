=begin pod

=TITLE Module Development Utilities

=SUBTITLE What can help you write/test/improve your module(s)

Here is a list of modules that you can find in the Perl 6 ecosystem
which aims to make the experiences of developing Perl 6 modules
more fun.

=head1 Modules builder and Authoring tools

Here some modules/tools that can help you with generating files that are part
of a module.

=item L<App::Mi6|http://modules.perl6.org/dist/App::Mi6>     Minimal authoring tool for Perl6
=item L<META6|http://modules.perl6.org/dist/META6>        Do things with Perl 6 META files
=item L<Module::Skeleton|http://modules.perl6.org/dist/Module::Skeleton>        Generate a skeleton module
=item L<p6doc|http://modules.perl6.org/dist/p6doc>        Generate documentation end-products

=head1 Tests

Some tests related modules


=item L<Test::META|http://modules.perl6.org/dist/Test::META>      Test your META6.info file
=item L<Test::Output|http://modules.perl6.org/dist/Test::Output>  Test the output to STDOUT and STDERR your program generates
=item L<Test::Screen|http://modules.perl6.org/dist/Proc::Screen>  Use B<GNU screen> to test fullscreen VT applications


=head1 NativeCall

Here some modules to help you work with NativeCall.


=item L<NativeHelpers::Array|http://modules.perl6.org/dist/NativeHelpers::Array>  Provides routines to deal with CArray
=item L<App::GPTrixie|http://modules.perl6.org/dist/App::GPTrixie>                Generate NativeCall code from C headers file
=item L<NativeCall::TypeDiag|http://modules.perl6.org/dist/NativeCall::TypeDiag>  Provides routines to test your CStruct


=head1 Sample modules

Modules that exist only as minimalist examples, tests for installers,
or skeletons.

=item L<Foo|http://modules.perl6.org/dist/Foo> A module with two distributions of different versions

=end pod
